/*
 * Cursor API
 * API for managing cursors and their operations
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.example.client.api;

import com.example.client.ApiClient;
import com.example.client.ApiException;
import com.example.client.ApiResponse;
import com.example.client.Pair;

import com.example.client.model.CreateCursorRequest;
import com.example.client.model.Cursor;
import com.example.client.model.CursorListResponse;
import com.example.client.model.ErrorResponse;
import com.example.client.model.MoveCursorRequest;
import com.example.client.model.UpdateCursorRequest;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CursorsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public CursorsApi() {
    this(new ApiClient());
  }

  public CursorsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Create a new cursor
   * Create a new cursor with specified properties
   * @param createCursorRequest  (required)
   * @return Cursor
   * @throws ApiException if fails to make API call
   */
  public Cursor createCursor(CreateCursorRequest createCursorRequest) throws ApiException {
    ApiResponse<Cursor> localVarResponse = createCursorWithHttpInfo(createCursorRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a new cursor
   * Create a new cursor with specified properties
   * @param createCursorRequest  (required)
   * @return ApiResponse&lt;Cursor&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Cursor> createCursorWithHttpInfo(CreateCursorRequest createCursorRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createCursorRequestBuilder(createCursorRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createCursor", localVarResponse);
        }
        return new ApiResponse<Cursor>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Cursor>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createCursorRequestBuilder(CreateCursorRequest createCursorRequest) throws ApiException {
    // verify the required parameter 'createCursorRequest' is set
    if (createCursorRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createCursorRequest' when calling createCursor");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/cursors";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createCursorRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete cursor
   * Delete a cursor by its unique identifier
   * @param cursorId Unique identifier of the cursor (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteCursor(String cursorId) throws ApiException {
    deleteCursorWithHttpInfo(cursorId);
  }

  /**
   * Delete cursor
   * Delete a cursor by its unique identifier
   * @param cursorId Unique identifier of the cursor (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteCursorWithHttpInfo(String cursorId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteCursorRequestBuilder(cursorId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteCursor", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteCursorRequestBuilder(String cursorId) throws ApiException {
    // verify the required parameter 'cursorId' is set
    if (cursorId == null) {
      throw new ApiException(400, "Missing the required parameter 'cursorId' when calling deleteCursor");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/cursors/{cursorId}"
        .replace("{cursorId}", ApiClient.urlEncode(cursorId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get cursor by ID
   * Retrieve a specific cursor by its unique identifier
   * @param cursorId Unique identifier of the cursor (required)
   * @return Cursor
   * @throws ApiException if fails to make API call
   */
  public Cursor getCursorById(String cursorId) throws ApiException {
    ApiResponse<Cursor> localVarResponse = getCursorByIdWithHttpInfo(cursorId);
    return localVarResponse.getData();
  }

  /**
   * Get cursor by ID
   * Retrieve a specific cursor by its unique identifier
   * @param cursorId Unique identifier of the cursor (required)
   * @return ApiResponse&lt;Cursor&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Cursor> getCursorByIdWithHttpInfo(String cursorId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getCursorByIdRequestBuilder(cursorId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getCursorById", localVarResponse);
        }
        return new ApiResponse<Cursor>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Cursor>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getCursorByIdRequestBuilder(String cursorId) throws ApiException {
    // verify the required parameter 'cursorId' is set
    if (cursorId == null) {
      throw new ApiException(400, "Missing the required parameter 'cursorId' when calling getCursorById");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/cursors/{cursorId}"
        .replace("{cursorId}", ApiClient.urlEncode(cursorId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List all cursors
   * Retrieve a list of all available cursors
   * @param page Page number for pagination (optional, default to 1)
   * @param limit Number of items per page (optional, default to 10)
   * @return CursorListResponse
   * @throws ApiException if fails to make API call
   */
  public CursorListResponse listCursors(Integer page, Integer limit) throws ApiException {
    ApiResponse<CursorListResponse> localVarResponse = listCursorsWithHttpInfo(page, limit);
    return localVarResponse.getData();
  }

  /**
   * List all cursors
   * Retrieve a list of all available cursors
   * @param page Page number for pagination (optional, default to 1)
   * @param limit Number of items per page (optional, default to 10)
   * @return ApiResponse&lt;CursorListResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CursorListResponse> listCursorsWithHttpInfo(Integer page, Integer limit) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listCursorsRequestBuilder(page, limit);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listCursors", localVarResponse);
        }
        return new ApiResponse<CursorListResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CursorListResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listCursorsRequestBuilder(Integer page, Integer limit) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/cursors";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "page";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Move cursor
   * Move a cursor to a new position
   * @param cursorId Unique identifier of the cursor (required)
   * @param moveCursorRequest  (required)
   * @return Cursor
   * @throws ApiException if fails to make API call
   */
  public Cursor moveCursor(String cursorId, MoveCursorRequest moveCursorRequest) throws ApiException {
    ApiResponse<Cursor> localVarResponse = moveCursorWithHttpInfo(cursorId, moveCursorRequest);
    return localVarResponse.getData();
  }

  /**
   * Move cursor
   * Move a cursor to a new position
   * @param cursorId Unique identifier of the cursor (required)
   * @param moveCursorRequest  (required)
   * @return ApiResponse&lt;Cursor&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Cursor> moveCursorWithHttpInfo(String cursorId, MoveCursorRequest moveCursorRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = moveCursorRequestBuilder(cursorId, moveCursorRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("moveCursor", localVarResponse);
        }
        return new ApiResponse<Cursor>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Cursor>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder moveCursorRequestBuilder(String cursorId, MoveCursorRequest moveCursorRequest) throws ApiException {
    // verify the required parameter 'cursorId' is set
    if (cursorId == null) {
      throw new ApiException(400, "Missing the required parameter 'cursorId' when calling moveCursor");
    }
    // verify the required parameter 'moveCursorRequest' is set
    if (moveCursorRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'moveCursorRequest' when calling moveCursor");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/cursors/{cursorId}/move"
        .replace("{cursorId}", ApiClient.urlEncode(cursorId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(moveCursorRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update cursor
   * Update an existing cursor with new properties
   * @param cursorId Unique identifier of the cursor (required)
   * @param updateCursorRequest  (required)
   * @return Cursor
   * @throws ApiException if fails to make API call
   */
  public Cursor updateCursor(String cursorId, UpdateCursorRequest updateCursorRequest) throws ApiException {
    ApiResponse<Cursor> localVarResponse = updateCursorWithHttpInfo(cursorId, updateCursorRequest);
    return localVarResponse.getData();
  }

  /**
   * Update cursor
   * Update an existing cursor with new properties
   * @param cursorId Unique identifier of the cursor (required)
   * @param updateCursorRequest  (required)
   * @return ApiResponse&lt;Cursor&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Cursor> updateCursorWithHttpInfo(String cursorId, UpdateCursorRequest updateCursorRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateCursorRequestBuilder(cursorId, updateCursorRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateCursor", localVarResponse);
        }
        return new ApiResponse<Cursor>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Cursor>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateCursorRequestBuilder(String cursorId, UpdateCursorRequest updateCursorRequest) throws ApiException {
    // verify the required parameter 'cursorId' is set
    if (cursorId == null) {
      throw new ApiException(400, "Missing the required parameter 'cursorId' when calling updateCursor");
    }
    // verify the required parameter 'updateCursorRequest' is set
    if (updateCursorRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateCursorRequest' when calling updateCursor");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/cursors/{cursorId}"
        .replace("{cursorId}", ApiClient.urlEncode(cursorId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateCursorRequest);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
