/*
 * Cursor API
 * API for managing cursors and their operations
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.client.api;

import com.example.client.ApiCallback;
import com.example.client.ApiClient;
import com.example.client.ApiException;
import com.example.client.ApiResponse;
import com.example.client.Configuration;
import com.example.client.Pair;
import com.example.client.ProgressRequestBody;
import com.example.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.example.client.model.CreateCursorRequest;
import com.example.client.model.Cursor;
import com.example.client.model.CursorListResponse;
import com.example.client.model.ErrorResponse;
import com.example.client.model.MoveCursorRequest;
import com.example.client.model.UpdateCursorRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CursorsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CursorsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CursorsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createCursor
     * @param createCursorRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Cursor created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCursorCall(CreateCursorRequest createCursorRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCursorRequest;

        // create path and map variables
        String localVarPath = "/cursors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCursorValidateBeforeCall(CreateCursorRequest createCursorRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createCursorRequest' is set
        if (createCursorRequest == null) {
            throw new ApiException("Missing the required parameter 'createCursorRequest' when calling createCursor(Async)");
        }

        return createCursorCall(createCursorRequest, _callback);

    }

    /**
     * Create a new cursor
     * Create a new cursor with specified properties
     * @param createCursorRequest  (required)
     * @return Cursor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Cursor created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public Cursor createCursor(CreateCursorRequest createCursorRequest) throws ApiException {
        ApiResponse<Cursor> localVarResp = createCursorWithHttpInfo(createCursorRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new cursor
     * Create a new cursor with specified properties
     * @param createCursorRequest  (required)
     * @return ApiResponse&lt;Cursor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Cursor created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Cursor> createCursorWithHttpInfo(CreateCursorRequest createCursorRequest) throws ApiException {
        okhttp3.Call localVarCall = createCursorValidateBeforeCall(createCursorRequest, null);
        Type localVarReturnType = new TypeToken<Cursor>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new cursor (asynchronously)
     * Create a new cursor with specified properties
     * @param createCursorRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Cursor created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCursorAsync(CreateCursorRequest createCursorRequest, final ApiCallback<Cursor> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCursorValidateBeforeCall(createCursorRequest, _callback);
        Type localVarReturnType = new TypeToken<Cursor>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCursor
     * @param cursorId Unique identifier of the cursor (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Cursor deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cursor not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCursorCall(String cursorId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cursors/{cursorId}"
            .replace("{" + "cursorId" + "}", localVarApiClient.escapeString(cursorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCursorValidateBeforeCall(String cursorId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cursorId' is set
        if (cursorId == null) {
            throw new ApiException("Missing the required parameter 'cursorId' when calling deleteCursor(Async)");
        }

        return deleteCursorCall(cursorId, _callback);

    }

    /**
     * Delete cursor
     * Delete a cursor by its unique identifier
     * @param cursorId Unique identifier of the cursor (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Cursor deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cursor not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCursor(String cursorId) throws ApiException {
        deleteCursorWithHttpInfo(cursorId);
    }

    /**
     * Delete cursor
     * Delete a cursor by its unique identifier
     * @param cursorId Unique identifier of the cursor (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Cursor deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cursor not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCursorWithHttpInfo(String cursorId) throws ApiException {
        okhttp3.Call localVarCall = deleteCursorValidateBeforeCall(cursorId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete cursor (asynchronously)
     * Delete a cursor by its unique identifier
     * @param cursorId Unique identifier of the cursor (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Cursor deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cursor not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCursorAsync(String cursorId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCursorValidateBeforeCall(cursorId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCursorById
     * @param cursorId Unique identifier of the cursor (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cursor not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCursorByIdCall(String cursorId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cursors/{cursorId}"
            .replace("{" + "cursorId" + "}", localVarApiClient.escapeString(cursorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCursorByIdValidateBeforeCall(String cursorId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cursorId' is set
        if (cursorId == null) {
            throw new ApiException("Missing the required parameter 'cursorId' when calling getCursorById(Async)");
        }

        return getCursorByIdCall(cursorId, _callback);

    }

    /**
     * Get cursor by ID
     * Retrieve a specific cursor by its unique identifier
     * @param cursorId Unique identifier of the cursor (required)
     * @return Cursor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cursor not found </td><td>  -  </td></tr>
     </table>
     */
    public Cursor getCursorById(String cursorId) throws ApiException {
        ApiResponse<Cursor> localVarResp = getCursorByIdWithHttpInfo(cursorId);
        return localVarResp.getData();
    }

    /**
     * Get cursor by ID
     * Retrieve a specific cursor by its unique identifier
     * @param cursorId Unique identifier of the cursor (required)
     * @return ApiResponse&lt;Cursor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cursor not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Cursor> getCursorByIdWithHttpInfo(String cursorId) throws ApiException {
        okhttp3.Call localVarCall = getCursorByIdValidateBeforeCall(cursorId, null);
        Type localVarReturnType = new TypeToken<Cursor>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get cursor by ID (asynchronously)
     * Retrieve a specific cursor by its unique identifier
     * @param cursorId Unique identifier of the cursor (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cursor not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCursorByIdAsync(String cursorId, final ApiCallback<Cursor> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCursorByIdValidateBeforeCall(cursorId, _callback);
        Type localVarReturnType = new TypeToken<Cursor>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCursors
     * @param page Page number for pagination (optional, default to 1)
     * @param limit Number of items per page (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCursorsCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cursors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCursorsValidateBeforeCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        return listCursorsCall(page, limit, _callback);

    }

    /**
     * List all cursors
     * Retrieve a list of all available cursors
     * @param page Page number for pagination (optional, default to 1)
     * @param limit Number of items per page (optional, default to 10)
     * @return CursorListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public CursorListResponse listCursors(Integer page, Integer limit) throws ApiException {
        ApiResponse<CursorListResponse> localVarResp = listCursorsWithHttpInfo(page, limit);
        return localVarResp.getData();
    }

    /**
     * List all cursors
     * Retrieve a list of all available cursors
     * @param page Page number for pagination (optional, default to 1)
     * @param limit Number of items per page (optional, default to 10)
     * @return ApiResponse&lt;CursorListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CursorListResponse> listCursorsWithHttpInfo(Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listCursorsValidateBeforeCall(page, limit, null);
        Type localVarReturnType = new TypeToken<CursorListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all cursors (asynchronously)
     * Retrieve a list of all available cursors
     * @param page Page number for pagination (optional, default to 1)
     * @param limit Number of items per page (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCursorsAsync(Integer page, Integer limit, final ApiCallback<CursorListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCursorsValidateBeforeCall(page, limit, _callback);
        Type localVarReturnType = new TypeToken<CursorListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for moveCursor
     * @param cursorId Unique identifier of the cursor (required)
     * @param moveCursorRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cursor moved successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cursor not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveCursorCall(String cursorId, MoveCursorRequest moveCursorRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = moveCursorRequest;

        // create path and map variables
        String localVarPath = "/cursors/{cursorId}/move"
            .replace("{" + "cursorId" + "}", localVarApiClient.escapeString(cursorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call moveCursorValidateBeforeCall(String cursorId, MoveCursorRequest moveCursorRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cursorId' is set
        if (cursorId == null) {
            throw new ApiException("Missing the required parameter 'cursorId' when calling moveCursor(Async)");
        }

        // verify the required parameter 'moveCursorRequest' is set
        if (moveCursorRequest == null) {
            throw new ApiException("Missing the required parameter 'moveCursorRequest' when calling moveCursor(Async)");
        }

        return moveCursorCall(cursorId, moveCursorRequest, _callback);

    }

    /**
     * Move cursor
     * Move a cursor to a new position
     * @param cursorId Unique identifier of the cursor (required)
     * @param moveCursorRequest  (required)
     * @return Cursor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cursor moved successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cursor not found </td><td>  -  </td></tr>
     </table>
     */
    public Cursor moveCursor(String cursorId, MoveCursorRequest moveCursorRequest) throws ApiException {
        ApiResponse<Cursor> localVarResp = moveCursorWithHttpInfo(cursorId, moveCursorRequest);
        return localVarResp.getData();
    }

    /**
     * Move cursor
     * Move a cursor to a new position
     * @param cursorId Unique identifier of the cursor (required)
     * @param moveCursorRequest  (required)
     * @return ApiResponse&lt;Cursor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cursor moved successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cursor not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Cursor> moveCursorWithHttpInfo(String cursorId, MoveCursorRequest moveCursorRequest) throws ApiException {
        okhttp3.Call localVarCall = moveCursorValidateBeforeCall(cursorId, moveCursorRequest, null);
        Type localVarReturnType = new TypeToken<Cursor>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Move cursor (asynchronously)
     * Move a cursor to a new position
     * @param cursorId Unique identifier of the cursor (required)
     * @param moveCursorRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cursor moved successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cursor not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveCursorAsync(String cursorId, MoveCursorRequest moveCursorRequest, final ApiCallback<Cursor> _callback) throws ApiException {

        okhttp3.Call localVarCall = moveCursorValidateBeforeCall(cursorId, moveCursorRequest, _callback);
        Type localVarReturnType = new TypeToken<Cursor>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCursor
     * @param cursorId Unique identifier of the cursor (required)
     * @param updateCursorRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cursor updated successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cursor not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCursorCall(String cursorId, UpdateCursorRequest updateCursorRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateCursorRequest;

        // create path and map variables
        String localVarPath = "/cursors/{cursorId}"
            .replace("{" + "cursorId" + "}", localVarApiClient.escapeString(cursorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCursorValidateBeforeCall(String cursorId, UpdateCursorRequest updateCursorRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cursorId' is set
        if (cursorId == null) {
            throw new ApiException("Missing the required parameter 'cursorId' when calling updateCursor(Async)");
        }

        // verify the required parameter 'updateCursorRequest' is set
        if (updateCursorRequest == null) {
            throw new ApiException("Missing the required parameter 'updateCursorRequest' when calling updateCursor(Async)");
        }

        return updateCursorCall(cursorId, updateCursorRequest, _callback);

    }

    /**
     * Update cursor
     * Update an existing cursor with new properties
     * @param cursorId Unique identifier of the cursor (required)
     * @param updateCursorRequest  (required)
     * @return Cursor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cursor updated successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cursor not found </td><td>  -  </td></tr>
     </table>
     */
    public Cursor updateCursor(String cursorId, UpdateCursorRequest updateCursorRequest) throws ApiException {
        ApiResponse<Cursor> localVarResp = updateCursorWithHttpInfo(cursorId, updateCursorRequest);
        return localVarResp.getData();
    }

    /**
     * Update cursor
     * Update an existing cursor with new properties
     * @param cursorId Unique identifier of the cursor (required)
     * @param updateCursorRequest  (required)
     * @return ApiResponse&lt;Cursor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cursor updated successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cursor not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Cursor> updateCursorWithHttpInfo(String cursorId, UpdateCursorRequest updateCursorRequest) throws ApiException {
        okhttp3.Call localVarCall = updateCursorValidateBeforeCall(cursorId, updateCursorRequest, null);
        Type localVarReturnType = new TypeToken<Cursor>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update cursor (asynchronously)
     * Update an existing cursor with new properties
     * @param cursorId Unique identifier of the cursor (required)
     * @param updateCursorRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cursor updated successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cursor not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCursorAsync(String cursorId, UpdateCursorRequest updateCursorRequest, final ApiCallback<Cursor> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCursorValidateBeforeCall(cursorId, updateCursorRequest, _callback);
        Type localVarReturnType = new TypeToken<Cursor>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
