{
  "openapi": "3.0.3",
  "info": {
    "title": "Cursor Background Agents API",
    "description": "API for managing background agents in Cursor. Background agents are AI-powered assistants that can work autonomously on your repositories, performing tasks like code generation, documentation updates, bug fixes, and more.\n\n## Authentication\nAll API requests require authentication using a Bearer token in the Authorization header:\n```\nAuthorization: Bearer <your-api-token>\n```\n\n## Rate Limiting\nThe API implements rate limiting to ensure fair usage. Check the response headers for rate limit information.\n\n## Pagination\nList endpoints use cursor-based pagination. Use the `nextCursor` value from the response to fetch the next page of results.\n",
    "version": "1.0.0",
    "contact": {
      "name": "Cursor Support",
      "url": "https://cursor.com/support"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "https://api.cursor.com/v0",
      "description": "Production server"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/agents": {
      "get": {
        "summary": "List all background agents",
        "description": "Retrieve a paginated list of all background agents for the authenticated user.",
        "operationId": "listAgents",
        "tags": [
          "Agents"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Number of background agents to return (1-100)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Pagination cursor from the previous response",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Agents retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "agents": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Agent"
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "description": "Cursor for the next page of results",
                      "nullable": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Launch a new background agent",
        "description": "Start a new background agent to work on your repository.",
        "operationId": "launchAgent",
        "tags": [
          "Agents"
        ],
        "requestBody": {
          "description": "Details for the new agent",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "prompt",
                  "source"
                ],
                "properties": {
                  "prompt": {
                    "$ref": "#/components/schemas/Prompt"
                  },
                  "source": {
                    "$ref": "#/components/schemas/Source"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Agent created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Agent"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/agents/{id}": {
      "get": {
        "summary": "Get agent status",
        "description": "Retrieve the current status and results of a specific background agent.",
        "operationId": "getAgentStatus",
        "tags": [
          "Agents"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the background agent",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^bc_[a-zA-Z0-9]+$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Agent details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Agent"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Delete an agent",
        "description": "Permanently delete a background agent and its associated resources.",
        "operationId": "deleteAgent",
        "tags": [
          "Agents"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the background agent",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^bc_[a-zA-Z0-9]+$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Agent deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID of the deleted agent"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/agents/{id}/conversation": {
      "get": {
        "summary": "Get agent conversation",
        "description": "Retrieve the conversation history of a background agent.",
        "operationId": "getAgentConversation",
        "tags": [
          "Agents"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the background agent",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^bc_[a-zA-Z0-9]+$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Agent ID"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Message"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/agents/{id}/followup": {
      "post": {
        "summary": "Add follow-up to an agent",
        "description": "Send an additional instruction to a running background agent.",
        "operationId": "addFollowup",
        "tags": [
          "Agents"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the background agent",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^bc_[a-zA-Z0-9]+$"
            }
          }
        ],
        "requestBody": {
          "description": "Follow-up details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "prompt"
                ],
                "properties": {
                  "prompt": {
                    "$ref": "#/components/schemas/Prompt"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Follow-up added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Agent ID"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api-key": {
      "get": {
        "summary": "Get API key information",
        "description": "Retrieve information about the current API key.",
        "operationId": "getApiKeyInfo",
        "tags": [
          "Authentication"
        ],
        "responses": {
          "200": {
            "description": "API key information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKeyInfo"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/models": {
      "get": {
        "summary": "List available models",
        "description": "Retrieve a list of available AI models.",
        "operationId": "listModels",
        "tags": [
          "Models"
        ],
        "responses": {
          "200": {
            "description": "Models retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "models": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Model"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/repositories": {
      "get": {
        "summary": "List repositories",
        "description": "Retrieve a list of repositories accessible to the authenticated user.",
        "operationId": "listRepositories",
        "tags": [
          "Repositories"
        ],
        "responses": {
          "200": {
            "description": "Repositories retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "repositories": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Repository"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Bearer token authentication"
      }
    },
    "schemas": {
      "Agent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the agent",
            "pattern": "^bc_[a-zA-Z0-9]+$",
            "example": "bc_abc123"
          },
          "name": {
            "type": "string",
            "description": "Human-readable name for the agent",
            "example": "Add README Documentation"
          },
          "status": {
            "type": "string",
            "description": "Current status of the agent",
            "enum": [
              "CREATING",
              "RUNNING",
              "COMPLETED",
              "FAILED",
              "CANCELLED"
            ],
            "example": "RUNNING"
          },
          "source": {
            "$ref": "#/components/schemas/Source"
          },
          "target": {
            "$ref": "#/components/schemas/Target"
          },
          "summary": {
            "type": "string",
            "description": "Summary of work completed by the agent",
            "nullable": true,
            "example": "Added README.md with installation instructions and usage examples"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the agent was created",
            "example": "2024-01-15T10:30:00Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the agent was last updated",
            "nullable": true,
            "example": "2024-01-15T11:45:00Z"
          }
        },
        "required": [
          "id",
          "name",
          "status",
          "source",
          "createdAt"
        ]
      },
      "Source": {
        "type": "object",
        "description": "Source repository and reference information",
        "properties": {
          "repository": {
            "type": "string",
            "description": "Repository URL",
            "format": "uri",
            "example": "https://github.com/your-org/your-repo"
          },
          "ref": {
            "type": "string",
            "description": "Git reference (branch, tag, or commit)",
            "example": "main"
          }
        },
        "required": [
          "repository",
          "ref"
        ]
      },
      "Target": {
        "type": "object",
        "description": "Target branch and deployment information",
        "properties": {
          "branchName": {
            "type": "string",
            "description": "Name of the target branch created by the agent",
            "example": "cursor/add-readme-1234"
          },
          "url": {
            "type": "string",
            "description": "URL to view the agent's work",
            "format": "uri",
            "example": "https://cursor.com/agents?id=bc_abc123"
          },
          "prUrl": {
            "type": "string",
            "description": "Pull request URL if created",
            "format": "uri",
            "nullable": true,
            "example": "https://github.com/your-org/your-repo/pull/1234"
          },
          "autoCreatePr": {
            "type": "boolean",
            "description": "Whether to automatically create a pull request",
            "default": false
          }
        },
        "required": [
          "branchName",
          "url",
          "autoCreatePr"
        ]
      },
      "Prompt": {
        "type": "object",
        "description": "Prompt containing instructions and optional images",
        "properties": {
          "text": {
            "type": "string",
            "description": "Text instruction for the agent",
            "example": "Add a README.md file with installation instructions"
          },
          "images": {
            "type": "array",
            "description": "Optional images to include with the prompt",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          }
        },
        "required": [
          "text"
        ]
      },
      "Image": {
        "type": "object",
        "description": "Image data with dimensions",
        "properties": {
          "data": {
            "type": "string",
            "description": "Base64-encoded image data",
            "example": "iVBORw0KGgoAAAANSUhEUgAA..."
          },
          "dimension": {
            "type": "object",
            "properties": {
              "width": {
                "type": "integer",
                "description": "Image width in pixels",
                "minimum": 1,
                "example": 1024
              },
              "height": {
                "type": "integer",
                "description": "Image height in pixels",
                "minimum": 1,
                "example": 768
              }
            },
            "required": [
              "width",
              "height"
            ]
          }
        },
        "required": [
          "data",
          "dimension"
        ]
      },
      "Message": {
        "type": "object",
        "description": "A message in the agent conversation",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique message identifier",
            "example": "msg_123"
          },
          "type": {
            "type": "string",
            "description": "Type of message",
            "enum": [
              "user_message",
              "assistant_message",
              "system_message"
            ],
            "example": "user_message"
          },
          "text": {
            "type": "string",
            "description": "Message content",
            "example": "Add a README.md file with installation instructions"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "When the message was created",
            "example": "2024-01-15T10:30:00Z"
          }
        },
        "required": [
          "id",
          "type",
          "text"
        ]
      },
      "ApiKeyInfo": {
        "type": "object",
        "description": "Information about the API key",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique API key identifier",
            "example": "ak_abc123"
          },
          "name": {
            "type": "string",
            "description": "Human-readable name for the API key",
            "example": "Production API Key"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the API key was created",
            "example": "2024-01-15T10:30:00Z"
          },
          "scopes": {
            "type": "array",
            "description": "Permissions granted to this API key",
            "items": {
              "type": "string"
            },
            "example": [
              "agents:read",
              "agents:write"
            ]
          },
          "userEmail": {
            "type": "string",
            "format": "email",
            "description": "Email of the user who owns this API key",
            "example": "developer@example.com"
          }
        },
        "required": [
          "id",
          "name",
          "createdAt",
          "scopes"
        ]
      },
      "Model": {
        "type": "object",
        "description": "Available AI model",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique model identifier",
            "example": "model_abc123"
          },
          "name": {
            "type": "string",
            "description": "Human-readable model name",
            "example": "GPT-4"
          },
          "description": {
            "type": "string",
            "description": "Model description",
            "example": "OpenAI's GPT-4 model"
          },
          "capabilities": {
            "type": "array",
            "description": "Model capabilities",
            "items": {
              "type": "string"
            },
            "example": [
              "text-generation",
              "code-completion"
            ]
          }
        },
        "required": [
          "id",
          "name",
          "description"
        ]
      },
      "Repository": {
        "type": "object",
        "description": "Repository information",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique repository identifier",
            "example": "repo_abc123"
          },
          "name": {
            "type": "string",
            "description": "Repository name",
            "example": "your-repo"
          },
          "fullName": {
            "type": "string",
            "description": "Full repository name including organization",
            "example": "your-org/your-repo"
          },
          "url": {
            "type": "string",
            "description": "Repository URL",
            "format": "uri",
            "example": "https://github.com/your-org/your-repo"
          },
          "private": {
            "type": "boolean",
            "description": "Whether the repository is private",
            "example": false
          },
          "defaultBranch": {
            "type": "string",
            "description": "Default branch name",
            "example": "main"
          }
        },
        "required": [
          "id",
          "name",
          "fullName",
          "url",
          "private",
          "defaultBranch"
        ]
      },
      "Error": {
        "type": "object",
        "description": "Error response",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Error code",
                "example": "invalid_request"
              },
              "message": {
                "type": "string",
                "description": "Human-readable error message",
                "example": "The request is missing required parameters"
              },
              "details": {
                "type": "object",
                "description": "Additional error details",
                "additionalProperties": true
              }
            },
            "required": [
              "code",
              "message"
            ]
          }
        },
        "required": [
          "error"
        ]
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad request - invalid parameters or request format",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized - invalid or missing authentication",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden - insufficient permissions",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "NotFound": {
        "description": "Not found - resource does not exist",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "UnprocessableEntity": {
        "description": "Unprocessable entity - request format is valid but content is invalid",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "RateLimited": {
        "description": "Too many requests - rate limit exceeded",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "headers": {
          "Retry-After": {
            "description": "Number of seconds to wait before retrying",
            "schema": {
              "type": "integer"
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Agents",
      "description": "Operations related to background agents"
    },
    {
      "name": "Authentication",
      "description": "Authentication and API key operations"
    },
    {
      "name": "Models",
      "description": "Available AI models"
    },
    {
      "name": "Repositories",
      "description": "Repository management"
    }
  ]
}